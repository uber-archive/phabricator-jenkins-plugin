<?jelly escape-by-default='true'?>
<j:jelly xmlns:j="jelly:core" xmlns:f="/lib/form">
  <!--
    This jelly script is used for per-project configuration.

    See global.jelly for a general discussion about jelly script.
  -->

  <!--
    Creates a checkbox field that shows the value of the "commentOnSuccess" property.
    When submitted, it will be passed to the corresponding constructor parameter.
  -->
  <f:entry title="Comment on Success" field="commentOnSuccess"
           description="Post a differential comment on successful builds">
    <f:checkbox default="false" />
  </f:entry>
  <f:entry title="Comment with console link on Failure" field="commentWithConsoleLinkOnFailure"
           description="Post a differential comment on failed builds with a link to the raw Console Output">
    <f:checkbox default="false" />
  </f:entry>
  <f:optionalBlock field="uberallsEnabled" name="uberallsEnabled" title="Enable Uberalls" checked="${instance.isUberallsEnabled()}" inline="true"
           description="Enable code coverage reporting">
    <f:entry title="Fail on decreased coverage" field="coverageCheck"
            description="Fail the build if coverage percentage is lower than minimum threshold and goes down from last build">
      <f:checkbox default="false" />
    </f:entry>
    <f:entry title="Coverage failure threshold" field="coverageThreshold"
            description="Fail builds if coverage change is below this threshold. Should be a negative number i.e. -5.0 as percent. This check will be performed only if overall coverage is lower than minimum threshold defined below">
        <f:textbox default="0" />
    </f:entry>
    <f:entry title="Minimum line coverage threshold" field="minCoverageThreshold"
            description="If line coverage is higher than this threshold - drop in coverage will not fail the build. Should be a positive number i.e. 85.0 as percent">
        <f:textbox default="100" />
    </f:entry>
    <f:entry title="Coverage report pattern" field="coverageReportPattern"
             description="The coverage xml report pattern. Use this if any jenkins coverage plugins are not applied.">
      <f:textbox default="**/coverage*.xml, **/cobertura*.xml" />
    </f:entry>
  </f:optionalBlock>

  <f:optionalBlock field="customComment" name="customComment" title="Add Custom Comment" inline="true" checked="${instance.isCustomComment()}">
    <f:entry title="Read comment from file" field="commentFile"
             description="Add additional context to Phabricator comment by outputting to this file">
      <f:textbox default=".phabricator-comment" />
    </f:entry>
    <f:entry title="Preserve Formatting" field="preserveFormatting"
            description="Preserve comment formatting">
      <f:checkbox default="false" />
    </f:entry>
    <f:entry title="Maximum comment character length" field="commentSize">
      <f:textbox default="1000" />
    </f:entry>
  </f:optionalBlock>

  <f:optionalBlock field="processLint" name="processLint" inline="true" title="Process lint results from a file" checked="${instance.isProcessLint()}">
    <f:entry title="Read lint violations from file" field="lintFile"
             description="Report lint violations by outputting them in Harbormaster-compatible JSON to this file">
      <f:textbox default=".phabricator-lint" />
    </f:entry>
    <f:entry title="Maximum bytes of lint to read" field="lintFileSize">
      <f:textbox default="100000" />
    </f:entry>
  </f:optionalBlock>
</j:jelly>
